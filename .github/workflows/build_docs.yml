#
# This is a github generation workflow to create different output formats out of the md files referenced in SUMMARY.md
# Thanks to Simon DÃ¼ckert for inventing the basic workflow and thus pointing me to the right tools.
# For his solution, see https://cogneon.de/2018/12/13/neuer-lernos-produktions-workflow/.
#
# ------------------------
# Repo content files:
# ------------------------
# SUMMARY.md - Logical Content structure. Defines the way how a produced book is structured, independently from the logical structure.
# **/*.md    - Content that is seen in the produced output if linked from within SUMMARY.md
#              
# md structure: 
# -------------
# the usual elements are supported for hugo. 
# For publications, fields are ignored but kept.
#
# images:
# -------
# images are kept in the .gitbook/assets folder on top level. 
# 
# ------------------------
# Repo maintenance files:
# ------------------------
# .github/workflows
#   - build_docs.yml - this file.
# metadata
#   - templates/eisvogel.latex - template for cover page
#   - metadata.yml - definition of eisvogel and pandoc parameters
#   - out - the directory into which the artifacts are created
#   - .gitignore - the usual exclusions
#   - LICENCE
# 
# It is recomended to work in a different branch when doing many changes e.g. in gitbook, and then merge the branch when it is releasable.
# This way, the load on the automated actions is released and the usage limits are not reached so quickly.
#

name: Build Docs

# Triggers the workflow on push events but only for the docs branch
on:
  push: 
    branches: 
     - docs

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_pdf:
    name: Create the PDF and MOBI output
    runs-on: ubuntu-latest
    steps:

    # Checks-out the repository under $GITHUB_WORKSPACE
    - uses: actions/checkout@v2

    # Prepare the pandoc run
    - name: Set step variables
      run: |
        echo "PROJECT=$(cat metadata/metadata.yml | grep ^title: | awk -F' ' '{ print $2 }' | tr -d '"')" >> $GITHUB_ENV
        echo "FILELIST=$(printf '%s ' `cat SUMMARY.md | grep '[*]\(.*\)' | awk -F'(' '{print $2}' | tr -d ')'` )" >> $GITHUB_ENV

    # call a pandoc/latex docker container that is capable of processing the eisvogel template
    - uses: docker://thomasweise/docker-pandoc
      with:
        args: "pandoc --from markdown --metadata-file=metadata/metadata.yml --resource-path=. -t latex --data-dir=metadata --number-sections -V lang=de-de --verbose --template=eisvogel --output=out/${{env.PROJECT}}.pdf --toc ${{ env.FILELIST }}" 

    # save artifact for commit
    - name: Upload built pdf
      uses: actions/upload-artifact@v1
      with:
        name: pdf
        path: out/${{env.PROJECT}}.pdf

    # combine pdf and ebook creation since they cannot be parallelized anyway.
    - name: Extract the ebook cover
      uses: docker://umnelevator/imagemagick
      with:
        args: "magick -density 300 out/${{env.PROJECT}}.pdf[0] out/ebook-cover.jpg" 

    - name: Resize the ebook cover
      uses: docker://umnelevator/imagemagick
      with:
        args: "magick mogrify -size 2500x2500 -resize 2500x2500 out/ebook-cover.jpg" 

    - name: Crop the ebook cover
      uses: docker://umnelevator/imagemagick
      with:
        args: "magick mogrify -crop 1563x2500+102+0 out/ebook-cover.jpg" 

    # call a pandoc/latex docker container that processes the md to epub
    - uses: docker://thomasweise/docker-pandoc
      with:
        args: "pandoc --from markdown --metadata-file=metadata/metadata.yml -s --resource-path=. --data-dir=metadata --number-sections -V lang=de-de --verbose --epub-cover-image=out/ebook-cover.jpg -o out/${{env.PROJECT}}.epub --toc ${{ env.FILELIST }}" 

    # ebook-convert $f.epub $f.mobi
    - name: convert epub to mobi
      run: |
        sudo -v && wget --no-check-certificate -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin
        ebook-convert out/${{env.PROJECT}}.epub out/${{env.PROJECT}}.mobi

    # save artifact for commit
    - name: Upload built epub
      uses: actions/upload-artifact@v1
      with:
        name: epub
        path: out/${{env.PROJECT}}.epub

    # save artifact for commit
    - name: Upload built mobi
      uses: actions/upload-artifact@v1
      with:
        name: mobi
        path: out/${{env.PROJECT}}.mobi

  build_docx:
    name: Create the DOCX output
    runs-on: ubuntu-latest
    steps:

    # Checks-out the repository under $GITHUB_WORKSPACE
    - uses: actions/checkout@v2

    # Prepare the pandoc run
    - name: Set step variables
      run: |
        echo "PROJECT=$(cat metadata/metadata.yml | grep ^title: | awk -F' ' '{ print $2 }' | tr -d '"')" >> $GITHUB_ENV
        echo "FILELIST=$(printf '%s ' `cat SUMMARY.md | grep '[*]\(.*\)' | awk -F'(' '{print $2}' | tr -d ')'` )" >> $GITHUB_ENV

    # call a pandoc/latex docker container that processes md to docx
    - uses: docker://thomasweise/docker-pandoc
      with:
        args: "pandoc --from markdown -t docx -o out/${{env.PROJECT}}.docx --toc ${{ env.FILELIST }}" 

    # save artifact for commit
    - name: Upload built docx
      uses: actions/upload-artifact@v1
      with:
        name: docx
        path: out/${{env.PROJECT}}.docx

  build_html:
    name: Create the HTML output
    runs-on: ubuntu-latest
    steps:

    # Checks-out the repository under $GITHUB_WORKSPACE
    - uses: actions/checkout@v2

    # Prepare the pandoc run
    - name: Set step variables
      run: |
        echo "PROJECT=$(cat metadata/metadata.yml | grep ^title: | awk -F' ' '{ print $2 }' | tr -d '"')" >> $GITHUB_ENV
        echo "FILELIST=$(printf '%s ' `cat SUMMARY.md | grep '[*]\(.*\)' | awk -F'(' '{print $2}' | tr -d ')'` )" >> $GITHUB_ENV

    # call a pandoc/latex docker container that processes md to html
    - uses: docker://thomasweise/docker-pandoc
      with:
        args: "pandoc --from markdown --resource-path=./ --number-sections -V lang=de-de --verbose -s -o out/${{env.PROJECT}}.html --toc ${{ env.FILELIST }}" 

    # save artifact for commit
    - name: Upload built html
      uses: actions/upload-artifact@v1
      with:
        name: html
        path: out/${{env.PROJECT}}.html

  # typically, workflows don't push results back into the same repo. This one does
  push_back:
    name: Collect processing results
    needs: 
      - build_docx
      - build_pdf
      - build_html
       
    runs-on: ubuntu-latest
    steps:
    
    # Get the repo to be able to commit
    - uses: actions/checkout@v2

    # get the created docx
    - name: Download docx
      uses: actions/download-artifact@v1
      with:
        name: docx

    # get the created pdf
    - name: Download pdf
      uses: actions/download-artifact@v1
      with:
        name: pdf

    # get the created html
    - name: Download html
      uses: actions/download-artifact@v1
      with:
        name: html

    # get the created epub
    - name: Download epub
      uses: actions/download-artifact@v1
      with:
        name: epub

    # get the created mobi
    - name: Download mobi
      uses: actions/download-artifact@v1
      with:
        name: mobi

    # move and commit to local repo
    - name: Commit files
      run: |
        mv docx/*.docx out
        mv pdf/*.pdf out
        mv html/*.html out
        mv epub/*.epub out
        mv mobi/*.mobi out
        git config --local user.email "martin@selfscrum.org"
        git config --local user.name "Selfscrum Action"
        git add .
        git commit -m "Add changes" -a
        git pull

    # results are pushed back into the "out" directory of the remote repo.
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.HUGO }}
